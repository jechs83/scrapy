import scrapy
import sys
import json
from demo.items import DemoItem
from datetime import datetime
from datetime import date
import pymongo
from demo.spiders.urls_db import *
from decouple import config
import time


def load_datetime():
    
    today = date.today()
    now = datetime.now()
    date_now = today.strftime("%d/%m/%Y")  
    time_now = now.strftime("%H:%M:%S")
        
    return date_now, time_now, today

current_day = load_datetime()[0]

class SagaSpider(scrapy.Spider):
        #list_to_skip = skip_brand()
    name = "saga"
    allowed_domains = ["falabella.com.pe"]
    handle_httpstatus_list = [200, 206]


    def __init__(self, *args, **kwargs):
        u = int(getattr(self, 'u', '0'))
        b = int(getattr(self, 'b', '0'))
        super(SagaSpider, self).__init__(*args, **kwargs)
        self.client = pymongo.MongoClient(config("MONGODB"))
        self.db = self.client["brand_allowed"]
        self.lista = self.brand_allowed() # Initialize self.lista based on self.b
        self.urls = links()[int(int(self.u)-1)]
   

    
    def brand_allowed(self):
        collection1 = self.db["todo"]
        shoes = collection1.find({})
        shoes_list = [doc["brand"] for doc in shoes]
        collection1 = self.db["nada"]
        nada = collection1.find({})
        return shoes_list ,nada


    def start_requests(self):
       
        for i, v in enumerate(self.urls):
            if "tottus" in v[0]:
                for e in range (v[1]+10):
                    url = v[0]+ "?subdomain=tottus&page="+str(e+1) +"&store=tottus"
                    yield scrapy.Request(url, self.parse)
            if "sodimac" in v[0]:
                for e in range (v[1]+10):
                    url = v[0]+ "?subdomain=sodimac&page="+str(e+1)+"&store=sodimac"
                    yield scrapy.Request(url, self.parse)
            else:
                for e in range (v[1]+10):
                    url = v[0]+ "?page="+str(e+1) 
                    yield scrapy.Request(url, self.parse)

    async def parse(self, response):
        if response.status != 200 or "/noResult" in response.url:
            self.logger.warning(f"Skipping URL {response.url}")
            return

        try:
            json_content = json.loads(response.xpath('//script[@id="__NEXT_DATA__"]/text()').get())
            productos = json_content['props']['pageProps']['results']
        except (json.JSONDecodeError, KeyError):
            self.logger.error(f"Failed to parse JSON from {response.url}")
            return

        items = []
        for producto in productos:
            item = DemoItem()
            item['brand'] = producto['brand'].lower()

            if self.lista[0] and item['brand'] not in self.lista[0]:
                continue

            item['product'] = producto['displayName']
            item['sku'] = item['_id'] = producto['skuId']

            prices = producto['prices']
            item['best_price'] = float(prices[1]['price'][0].replace(",", "")) if len(prices) > 2 else 0
            item['card_price'] = float(prices[0]['price'][0].replace(",", "")) if len(prices) > 2 else 0
            item['list_price'] = float(prices[-1]['price'][0].replace(",", ""))

            if all(price == 0 for price in [item['list_price'], item['card_price'], item['best_price']]):
                continue

            item['link'] = producto['url']
            item['image'] = producto['mediaUrls'][0] if producto['mediaUrls'] else ''
            item['web_dsct'] = float(producto['discountBadge']['label'].replace("-", "").replace("%", "")) if 'discountBadge' in producto else 0
            
            try:
                item["dsct_app"] = i["multipurposeBadges"][0]["label"]
            
                if item["dsct_app"]=="Dscto extra por app" :
                    item["dsct_app"]  = 1
                else:
                    item["dsct_app"] = 0
            except: 
                item["dsct_app"] = 0

            item['market'] = "saga"
            item['date'], item['time'], _ = load_datetime()
            item['home_list'] = response.url
            item['card_dsct'] = 0

            items.append(item)

        return items